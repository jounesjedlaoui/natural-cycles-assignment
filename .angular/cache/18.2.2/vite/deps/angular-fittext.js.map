{
  "version": 3,
  "sources": ["../../../../../node_modules/angular-fittext/fesm5/angular-fittext.js"],
  "sourcesContent": ["import { Directive, ElementRef, HostListener, Input, Renderer2, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AngularFittextDirective = /** @class */function () {\n  function AngularFittextDirective(el, renderer) {\n    var _this = this;\n    this.el = el;\n    this.renderer = renderer;\n    this.fittext = true;\n    this.compression = 1;\n    this.activateOnResize = true;\n    this.minFontSize = 0;\n    this.maxFontSize = Number.POSITIVE_INFINITY;\n    this.delay = 100;\n    this.fontUnit = 'px';\n    this.calcSize = 10;\n    this.onWindowResize = function () {\n      if (_this.activateOnResize) {\n        _this.setFontSize();\n      }\n    };\n    this.setFontSize = function () {\n      _this.resizeTimeout = setTimeout(function () {\n        if (_this.fittextElement.offsetHeight * _this.fittextElement.offsetWidth !== 0) {\n          // reset to default\n          // reset to default\n          _this.setStyles(_this.calcSize, 1, 'inline-block');\n          // set new\n          // set new\n          _this.setStyles(_this.calculateNewFontSize(), _this.lineHeight, _this.display);\n        }\n      }.bind(_this), _this.delay);\n    };\n    this.calculateNewFontSize = function () {\n      var /** @type {?} */ratio = _this.calcSize * _this.newlines / _this.fittextElement.offsetWidth / _this.newlines;\n      return Math.max(Math.min((_this.fittextParent.offsetWidth - (parseFloat(getComputedStyle(_this.fittextParent).paddingLeft) + parseFloat(getComputedStyle(_this.fittextParent).paddingRight)) - 6) * ratio * _this.compression, _this.fittextMaxFontSize), _this.fittextMinFontSize);\n    };\n    this.setStyles = function (fontSize, lineHeight, display) {\n      _this.renderer.setStyle(_this.fittextElement, 'fontSize', fontSize.toString() + _this.fontUnit);\n      _this.renderer.setStyle(_this.fittextElement, 'lineHeight', lineHeight.toString());\n      _this.renderer.setStyle(_this.fittextElement, 'display', display);\n    };\n    this.fittextElement = el.nativeElement;\n    this.fittextParent = this.fittextElement.parentElement;\n    this.computed = window.getComputedStyle(this.fittextElement);\n    this.newlines = this.fittextElement.childElementCount > 0 ? this.fittextElement.childElementCount : 1;\n    this.lineHeight = this.computed['line-height'];\n    this.display = this.computed['display'];\n  }\n  /**\n   * @return {?}\n   */\n  AngularFittextDirective.prototype.ngOnInit =\n  /**\n  * @return {?}\n  */\n  function () {\n    this.fittextMinFontSize = this.minFontSize === 'inherit' ? this.computed['font-size'] : this.minFontSize;\n    this.fittextMaxFontSize = this.maxFontSize === 'inherit' ? this.computed['font-size'] : this.maxFontSize;\n  };\n  /**\n   * @return {?}\n   */\n  AngularFittextDirective.prototype.ngAfterViewInit =\n  /**\n  * @return {?}\n  */\n  function () {\n    this.setFontSize();\n  };\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  AngularFittextDirective.prototype.ngOnChanges =\n  /**\n  * @param {?} changes\n  * @return {?}\n  */\n  function (changes) {\n    if (changes['compression'] && !changes['compression'].firstChange) {\n      this.setFontSize();\n    }\n    if (changes['ngModel']) {\n      this.fittextElement.innerHTML = this.ngModel;\n      this.setFontSize();\n    }\n  };\n  AngularFittextDirective.decorators = [{\n    type: Directive,\n    args: [{\n      selector: '[fittext]'\n    }]\n  }];\n  /** @nocollapse */\n  AngularFittextDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: Renderer2\n    }];\n  };\n  AngularFittextDirective.propDecorators = {\n    \"fittext\": [{\n      type: Input\n    }],\n    \"compression\": [{\n      type: Input\n    }],\n    \"activateOnResize\": [{\n      type: Input\n    }],\n    \"minFontSize\": [{\n      type: Input\n    }],\n    \"maxFontSize\": [{\n      type: Input\n    }],\n    \"delay\": [{\n      type: Input\n    }],\n    \"ngModel\": [{\n      type: Input\n    }],\n    \"fontUnit\": [{\n      type: Input\n    }],\n    \"onWindowResize\": [{\n      type: HostListener,\n      args: ['window:resize']\n    }]\n  };\n  return AngularFittextDirective;\n}();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AngularFittextModule = /** @class */function () {\n  function AngularFittextModule() {}\n  AngularFittextModule.decorators = [{\n    type: NgModule,\n    args: [{\n      declarations: [AngularFittextDirective],\n      exports: [AngularFittextDirective]\n    }]\n  }];\n  return AngularFittextModule;\n}();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { AngularFittextModule, AngularFittextDirective };\n\n"],
  "mappings": "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",
  "names": ["AngularFittextDirective", "AngularFittextModule"]
}
